# -*- coding: utf-8 -*-

import unittest
import logging  # noqa

import numpy as np
from nn_extractor import nnrecord  # noqa
from nn_extractor.nnrecord import NNRecord
from nn_extractor import nnextractor_pb2


class TestNNRecord(unittest.TestCase):

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_serialize_ndarray(self):
        expected_bytes = b'\x10\x01\x1a\xa0\x02\n\x03\x04\x06\x08\x12\x98\x02\xff\xff\xff\xffp\x00\x00\x00\x10\x00\x00\x00\x00\x00\n\x00\x0c\x00\x06\x00\x05\x00\x08\x00\n\x00\x00\x00\x00\x01\x04\x00\x0c\x00\x00\x00\x08\x00\x08\x00\x00\x00\x04\x00\x08\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x10\x00\x14\x00\x08\x00\x06\x00\x07\x00\x0c\x00\x00\x00\x10\x00\x10\x00\x00\x00\x00\x00\x01\x06\x10\x00\x00\x00\x18\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x04\x00\x04\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x88\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x16\x00\x06\x00\x05\x00\x08\x00\x0c\x00\x0c\x00\x00\x00\x00\x03\x04\x00\x18\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x18\x00\x0c\x00\x04\x00\x08\x00\n\x00\x00\x00<\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x13\x05\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'  # noqa

        array = np.array([
            [[True, True, True, True], [True, True, True, False], [True, True, False, False]],
            [[True, False, False, False], [True, False, True, False], [False, False, False, False]],
        ], dtype=np.bool)

        a = NNRecord(array)

        a_pb = a.serialize_pb()
        a_bytes = a_pb.SerializeToString()

        print(f'a_bytes: {a_bytes}')

        assert a_bytes == expected_bytes

    def test_serialize_list(self):
        expected_bytes = b'\x10\x03"\xa5\x02\x10\x01\x1a\xa0\x02\n\x03\x04\x06\x08\x12\x98\x02\xff\xff\xff\xffp\x00\x00\x00\x10\x00\x00\x00\x00\x00\n\x00\x0c\x00\x06\x00\x05\x00\x08\x00\n\x00\x00\x00\x00\x01\x04\x00\x0c\x00\x00\x00\x08\x00\x08\x00\x00\x00\x04\x00\x08\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x10\x00\x14\x00\x08\x00\x06\x00\x07\x00\x0c\x00\x00\x00\x10\x00\x10\x00\x00\x00\x00\x00\x01\x06\x10\x00\x00\x00\x18\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x04\x00\x04\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x88\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x16\x00\x06\x00\x05\x00\x08\x00\x0c\x00\x0c\x00\x00\x00\x00\x03\x04\x00\x18\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x18\x00\x0c\x00\x04\x00\x08\x00\n\x00\x00\x00<\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x13\x05\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'  # noqa

        array = np.array([
            [[True, True, True, True], [True, True, True, False], [True, True, False, False]],
            [[True, False, False, False], [True, False, True, False], [False, False, False, False]],
        ], dtype=np.bool)

        a = NNRecord([array])

        a_pb = a.serialize_pb()
        a_bytes = a_pb.SerializeToString()

        print(f'a_bytes: {a_bytes}')

        assert a_bytes == expected_bytes

    def test_serialize_list_2(self):
        expected_bytes = b'\x10\x03"\xa5\x02\x10\x01\x1a\xa0\x02\n\x03\x04\x06\x08\x12\x98\x02\xff\xff\xff\xffp\x00\x00\x00\x10\x00\x00\x00\x00\x00\n\x00\x0c\x00\x06\x00\x05\x00\x08\x00\n\x00\x00\x00\x00\x01\x04\x00\x0c\x00\x00\x00\x08\x00\x08\x00\x00\x00\x04\x00\x08\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x10\x00\x14\x00\x08\x00\x06\x00\x07\x00\x0c\x00\x00\x00\x10\x00\x10\x00\x00\x00\x00\x00\x01\x06\x10\x00\x00\x00\x18\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x04\x00\x04\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x88\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x16\x00\x06\x00\x05\x00\x08\x00\x0c\x00\x0c\x00\x00\x00\x00\x03\x04\x00\x18\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x18\x00\x0c\x00\x04\x00\x08\x00\n\x00\x00\x00<\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x13\x05\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'  # noqa

        array = np.array([
            [[True, True, True, True], [True, True, True, False], [True, True, False, False]],
            [[True, False, False, False], [True, False, True, False], [False, False, False, False]],
        ], dtype=np.bool)

        a = NNRecord([NNRecord(array)])

        a_pb = a.serialize_pb()
        a_bytes = a_pb.SerializeToString()

        print(f'a_bytes: {a_bytes}')

        assert a_bytes == expected_bytes

    def test_serialize_dict(self):
        expected_bytes = b'\x10\x04*\xab\x02\n\x01a\x12\xa5\x02\x10\x01\x1a\xa0\x02\n\x03\x04\x06\x08\x12\x98\x02\xff\xff\xff\xffp\x00\x00\x00\x10\x00\x00\x00\x00\x00\n\x00\x0c\x00\x06\x00\x05\x00\x08\x00\n\x00\x00\x00\x00\x01\x04\x00\x0c\x00\x00\x00\x08\x00\x08\x00\x00\x00\x04\x00\x08\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x10\x00\x14\x00\x08\x00\x06\x00\x07\x00\x0c\x00\x00\x00\x10\x00\x10\x00\x00\x00\x00\x00\x01\x06\x10\x00\x00\x00\x18\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x04\x00\x04\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x88\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x16\x00\x06\x00\x05\x00\x08\x00\x0c\x00\x0c\x00\x00\x00\x00\x03\x04\x00\x18\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x18\x00\x0c\x00\x04\x00\x08\x00\n\x00\x00\x00<\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x13\x05\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'  # noqa

        array = np.array([
            [[True, True, True, True], [True, True, True, False], [True, True, False, False]],
            [[True, False, False, False], [True, False, True, False], [False, False, False, False]],
        ], dtype=np.bool)

        a = NNRecord({'a': array})

        a_pb = a.serialize_pb()
        a_bytes = a_pb.SerializeToString()

        print(f'a_bytes: {a_bytes}')

        assert a_bytes == expected_bytes

    def test_serialize_dict_2(self):
        expected_bytes = b'\x10\x04*\xab\x02\n\x01a\x12\xa5\x02\x10\x01\x1a\xa0\x02\n\x03\x04\x06\x08\x12\x98\x02\xff\xff\xff\xffp\x00\x00\x00\x10\x00\x00\x00\x00\x00\n\x00\x0c\x00\x06\x00\x05\x00\x08\x00\n\x00\x00\x00\x00\x01\x04\x00\x0c\x00\x00\x00\x08\x00\x08\x00\x00\x00\x04\x00\x08\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x10\x00\x14\x00\x08\x00\x06\x00\x07\x00\x0c\x00\x00\x00\x10\x00\x10\x00\x00\x00\x00\x00\x01\x06\x10\x00\x00\x00\x18\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x04\x00\x04\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x88\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x16\x00\x06\x00\x05\x00\x08\x00\x0c\x00\x0c\x00\x00\x00\x00\x03\x04\x00\x18\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x18\x00\x0c\x00\x04\x00\x08\x00\n\x00\x00\x00<\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x13\x05\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'  # noqa

        array = np.array([
            [[True, True, True, True], [True, True, True, False], [True, True, False, False]],
            [[True, False, False, False], [True, False, True, False], [False, False, False, False]],
        ], dtype=np.bool)

        a = NNRecord({'a': NNRecord(array)})

        a_pb = a.serialize_pb()
        a_bytes = a_pb.SerializeToString()

        print(f'a_bytes: {a_bytes}')

        assert a_bytes == expected_bytes

    def test_deserialize_ndarray(self):
        a_bytes = b'\x10\x01\x1a\xa0\x02\n\x03\x04\x06\x08\x12\x98\x02\xff\xff\xff\xffp\x00\x00\x00\x10\x00\x00\x00\x00\x00\n\x00\x0c\x00\x06\x00\x05\x00\x08\x00\n\x00\x00\x00\x00\x01\x04\x00\x0c\x00\x00\x00\x08\x00\x08\x00\x00\x00\x04\x00\x08\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x10\x00\x14\x00\x08\x00\x06\x00\x07\x00\x0c\x00\x00\x00\x10\x00\x10\x00\x00\x00\x00\x00\x01\x06\x10\x00\x00\x00\x18\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x04\x00\x04\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x88\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x16\x00\x06\x00\x05\x00\x08\x00\x0c\x00\x0c\x00\x00\x00\x00\x03\x04\x00\x18\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x18\x00\x0c\x00\x04\x00\x08\x00\n\x00\x00\x00<\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x13\x05\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'  # noqa

        array = np.array([
            [[True, True, True, True], [True, True, True, False], [True, True, False, False]],
            [[True, False, False, False], [True, False, True, False], [False, False, False, False]],
        ], dtype=np.bool)

        expected_a = NNRecord(array)

        a_pb = nnextractor_pb2.NNRecord.FromString(a_bytes)
        a = NNRecord.deserialize_pb(a_pb)

        assert a == expected_a

    def test_deserialize_list(self):
        a_bytes = b'\x10\x03"\xa5\x02\x10\x01\x1a\xa0\x02\n\x03\x04\x06\x08\x12\x98\x02\xff\xff\xff\xffp\x00\x00\x00\x10\x00\x00\x00\x00\x00\n\x00\x0c\x00\x06\x00\x05\x00\x08\x00\n\x00\x00\x00\x00\x01\x04\x00\x0c\x00\x00\x00\x08\x00\x08\x00\x00\x00\x04\x00\x08\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x10\x00\x14\x00\x08\x00\x06\x00\x07\x00\x0c\x00\x00\x00\x10\x00\x10\x00\x00\x00\x00\x00\x01\x06\x10\x00\x00\x00\x18\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x04\x00\x04\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x88\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x16\x00\x06\x00\x05\x00\x08\x00\x0c\x00\x0c\x00\x00\x00\x00\x03\x04\x00\x18\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x18\x00\x0c\x00\x04\x00\x08\x00\n\x00\x00\x00<\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x13\x05\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'  # noqa

        array = np.array([
            [[True, True, True, True], [True, True, True, False], [True, True, False, False]],
            [[True, False, False, False], [True, False, True, False], [False, False, False, False]],
        ], dtype=np.bool)

        expected_a = NNRecord([array])

        a_pb = nnextractor_pb2.NNRecord.FromString(a_bytes)
        a = NNRecord.deserialize_pb(a_pb)

        assert a == expected_a

    def test_deserialize_dict(self):
        a_bytes = b'\x10\x04*\xab\x02\n\x01a\x12\xa5\x02\x10\x01\x1a\xa0\x02\n\x03\x04\x06\x08\x12\x98\x02\xff\xff\xff\xffp\x00\x00\x00\x10\x00\x00\x00\x00\x00\n\x00\x0c\x00\x06\x00\x05\x00\x08\x00\n\x00\x00\x00\x00\x01\x04\x00\x0c\x00\x00\x00\x08\x00\x08\x00\x00\x00\x04\x00\x08\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x10\x00\x14\x00\x08\x00\x06\x00\x07\x00\x0c\x00\x00\x00\x10\x00\x10\x00\x00\x00\x00\x00\x01\x06\x10\x00\x00\x00\x18\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x04\x00\x04\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x88\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x16\x00\x06\x00\x05\x00\x08\x00\x0c\x00\x0c\x00\x00\x00\x00\x03\x04\x00\x18\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x18\x00\x0c\x00\x04\x00\x08\x00\n\x00\x00\x00<\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x13\x05\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'  # noqa

        array = np.array([
            [[True, True, True, True], [True, True, True, False], [True, True, False, False]],
            [[True, False, False, False], [True, False, True, False], [False, False, False, False]],
        ], dtype=np.bool)

        expected_a = NNRecord({'a': array})

        a_pb = nnextractor_pb2.NNRecord.FromString(a_bytes)
        a = NNRecord.deserialize_pb(a_pb)

        assert a == expected_a

    def test_meta_ndarray(self):
        expected_meta = {'shape': (2, 3, 4), 'the_type': 'bool'}

        array = np.array([
            [[True, True, True, True], [True, True, True, False], [True, True, False, False]],
            [[True, False, False, False], [True, False, True, False], [False, False, False, False]],
        ], dtype=np.bool)

        a = NNRecord(array)

        meta = a.meta()

        print(f'meta: {meta}')

        assert meta == expected_meta

    def test_meta_list(self):
        expected_meta = [{'shape': (2, 3, 4), 'the_type': 'bool'}]

        array = np.array([
            [[True, True, True, True], [True, True, True, False], [True, True, False, False]],
            [[True, False, False, False], [True, False, True, False], [False, False, False, False]],
        ], dtype=np.bool)

        a = NNRecord([array])

        meta = a.meta()

        print(f'meta: {meta}')

        assert meta == expected_meta

    def test_meta_dict(self):
        expected_meta = {'a': {'shape': (2, 3, 4), 'the_type': 'bool'}}

        array = np.array([
            [[True, True, True, True], [True, True, True, False], [True, True, False, False]],
            [[True, False, False, False], [True, False, True, False], [False, False, False, False]],
        ], dtype=np.bool)

        a = NNRecord({'a': array})

        meta = a.meta()

        print(f'meta: {meta}')

        assert meta == expected_meta

    def test_meta_named_ndarray(self):
        expected_meta = {'name': 'name_a', 'record': {'shape': (2, 3, 4), 'the_type': 'bool'}}

        array = np.array([
            [[True, True, True, True], [True, True, True, False], [True, True, False, False]],
            [[True, False, False, False], [True, False, True, False], [False, False, False, False]],
        ], dtype=np.bool)

        a = NNRecord(array, name='name_a')

        meta = a.meta()

        print(f'meta: {meta}')

        assert meta == expected_meta
